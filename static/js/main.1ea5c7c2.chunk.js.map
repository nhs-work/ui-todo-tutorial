{"version":3,"sources":["context/todo.actions.js","context/todo.reducer.js","context/TodoContextProvider.jsx","components/Header.jsx","config/appConfig.js","config/firebaseConfig.js","services/firebaseApi.js","components/TodoInput.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["setTodos","todos","type","data","addTodo","id","description","removeTodo","todoReducer","state","action","newTodo","newTodo2","initialState","TodoContext","createContext","TodoContextProvider","children","useReducer","dispatch","Provider","value","Header","data-cy","require","config","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fireStore","firestore","firebaseApi","fetchTodos","a","collection","get","docs","forEach","item","doc","set","updateTodo","update","deleteTodo","delete","TodoInput","useState","inputValue","setInputValue","useContext","handleAddClick","uuidv4","then","catch","err","console","log","className","onChange","target","placeholder","size","shape","onClick","TodoTask","props","isEditable","setEditable","currentValue","setCurrentValue","disabled","event","TodoList","useEffect","handleDeleteTodo","handleUpdateTodo","newValue","Object","entries","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1ea5c7c2.chunk.js","sourcesContent":["export const SET_TODOS = \"SET_TODOS\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const UPDATE_TODO = \"UPDATE_TODO\";\r\n\r\nexport const setTodos = (todos) => ({ type: SET_TODOS, data: todos });\r\nexport const addTodo = (id, description) => ({\r\n  type: ADD_TODO,\r\n  data: { id, description },\r\n});\r\nexport const removeTodo = (id) => ({\r\n  type: REMOVE_TODO,\r\n  data: { id },\r\n});\r\nexport const updateTodo = (id, description) => ({\r\n  type: UPDATE_TODO,\r\n  data: { id, description },\r\n});\r\n","import { SET_TODOS, ADD_TODO, REMOVE_TODO, UPDATE_TODO } from \"./todo.actions\";\r\n\r\nexport const todoReducer = (state, action) => {\r\n  const { type, data } = action;\r\n  switch (type) {\r\n    case SET_TODOS:\r\n      return { ...state, todos: data };\r\n    case ADD_TODO:\r\n      const todos = {\r\n        ...state.todos,\r\n        [data.id]: { description: data.description },\r\n      };\r\n      return { ...state, todos };\r\n    case REMOVE_TODO:\r\n      const newTodo = {\r\n        ...state.todos,\r\n      };\r\n      delete newTodo[data.id];\r\n      return { ...state, todos: newTodo };\r\n    case UPDATE_TODO:\r\n      const newTodo2 = {\r\n        ...state.todos,\r\n        [data.id]: { description: data.description },\r\n      };\r\n      return { ...state, todos: newTodo2 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { todoReducer } from \"./todo.reducer\";\r\n\r\nconst initialState = { todos: {} };\r\nexport const TodoContext = createContext(initialState);\r\n\r\nexport const TodoContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(todoReducer, initialState);\r\n  return (\r\n    <TodoContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </TodoContext.Provider>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Header = () => <h1 data-cy=\"header\">TODO</h1>;\r\n","require(\"dotenv\").config();\r\n\r\nexport const config = {\r\n  firebase: {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  },\r\n};\r\n","import firebase from \"firebase/app\";\r\n// Required for side-effects\r\nimport \"firebase/firestore\";\r\nimport { config } from \"./appConfig\";\r\n\r\nfirebase.initializeApp(config.firebase);\r\n\r\nexport const fireStore = firebase.firestore();","import { fireStore } from \"../config/firebaseConfig\";\r\n\r\nconst COLLECTION_NAME = \"todo-list\";\r\n\r\nconst fetchTodos = async () => {\r\n  const todos = {};\r\n  (await fireStore.collection(COLLECTION_NAME).get()).docs.forEach((item) => {\r\n    todos[item.id] = item.data();\r\n  });\r\n  return todos;\r\n};\r\n\r\nconst addTodo = async (id, description) => {\r\n  return await fireStore.collection(COLLECTION_NAME).doc(id).set({ description });\r\n};\r\n\r\nconst updateTodo = async (id, description) => {\r\n  return await fireStore.collection(COLLECTION_NAME).doc(id).update({ description });\r\n};\r\n\r\nconst deleteTodo = async (id) => {\r\n  return await fireStore.collection(COLLECTION_NAME).doc(id).delete();\r\n};\r\n\r\nexport const firebaseApi = {\r\n  fetchTodos,\r\n  addTodo,\r\n  updateTodo,\r\n  deleteTodo,\r\n};\r\n","import { Button, Input } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addTodo } from \"../context/todo.actions\";\r\nimport { TodoContext } from \"../context/TodoContextProvider\";\r\nimport { firebaseApi } from \"../services/firebaseApi\";\r\n\r\nexport const TodoInput = () => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const { dispatch } = useContext(TodoContext);\r\n\r\n  const handleAddClick = async () => {\r\n    const id = uuidv4();\r\n\r\n    await firebaseApi\r\n      .addTodo(id, inputValue)\r\n      .then(() => {\r\n        dispatch(addTodo(id, inputValue));\r\n        setInputValue(\"\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-input\">\r\n      <Input\r\n        value={inputValue}\r\n        onChange={({ target: { value } }) => setInputValue(value)}\r\n        placeholder=\"Add a TODO\"\r\n        size=\"large\"\r\n        className=\"todo-input__input\"\r\n        data-cy=\"todo-input__input\"\r\n      />\r\n      <Button\r\n        type=\"primary\"\r\n        shape=\"round\"\r\n        onClick={handleAddClick}\r\n        className=\"todo-input__button\"\r\n        data-cy=\"todo-input__button\"\r\n      >\r\n        Add\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { TodoContext } from \"../context/TodoContextProvider\";\r\nimport { removeTodo, addTodo, setTodos } from \"../context/todo.actions\";\r\n\r\nimport { firebaseApi } from \"../services/firebaseApi\";\r\n\r\nconst TodoTask = (props) => {\r\n  const [isEditable, setEditable] = useState(false);\r\n  const [currentValue, setCurrentValue] = useState(props.description);\r\n  return (\r\n    <div className=\"todo-task\">\r\n      <input\r\n        className=\"todo-task__name\"\r\n        data-cy=\"todo-task__name\"\r\n        value={currentValue}\r\n        disabled={!isEditable}\r\n        onChange={(event) => setCurrentValue(event.target.value)}\r\n      ></input>\r\n      {!isEditable && (\r\n        <Button\r\n          type=\"primary\"\r\n          shape=\"round\"\r\n          className=\"todo-task__button\"\r\n          data-cy=\"todo-task__button-edit\"\r\n          onClick={() => setEditable(true)}\r\n        >\r\n          Edit\r\n        </Button>\r\n      )}\r\n      {isEditable && (\r\n        <Button\r\n          type=\"primary\"\r\n          shape=\"round\"\r\n          className=\"todo-task__button\"\r\n          data-cy=\"todo-task__button-update\"\r\n          onClick={() => {\r\n            setEditable(false);\r\n            props.update(props.id, currentValue);\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n      )}\r\n      {!isEditable && (\r\n        <Button\r\n          type=\"primary\"\r\n          shape=\"round\"\r\n          className=\"todo-task__button\"\r\n          data-cy=\"todo-task__button-delete\"\r\n          onClick={() => {\r\n            if (!isEditable) props.delete(props.id);\r\n          }}\r\n        >\r\n          Delete\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TodoList = () => {\r\n  const { dispatch } = useContext(TodoContext);\r\n  const { state } = useContext(TodoContext);\r\n\r\n  useEffect(() => {\r\n    const fetchTodos = async () => {\r\n      // const todos = await firebaseApi.fetchTodos();\r\n      // dispatch(setTodos(todos));\r\n      await firebaseApi\r\n        .fetchTodos()\r\n        .then((todos) => dispatch(setTodos(todos)))\r\n        .catch((err) => console.log(err));\r\n    };\r\n\r\n    fetchTodos();\r\n  }, [dispatch]);\r\n\r\n  const handleDeleteTodo = async (id) => {\r\n    await firebaseApi\r\n      .deleteTodo(id)\r\n      .then(() => dispatch(removeTodo(id)))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleUpdateTodo = async (id, newValue) => {\r\n    await firebaseApi\r\n      .updateTodo(id, newValue)\r\n      .then(() => dispatch(addTodo(id, newValue)))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-list\" data-cy=\"todo-list\">\r\n      {Object.entries(state.todos).map(([id, todo]) => (\r\n        <TodoTask\r\n          key={id}\r\n          description={todo.description}\r\n          delete={handleDeleteTodo}\r\n          update={handleUpdateTodo}\r\n          id={id}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { TodoContextProvider } from \"./context/TodoContextProvider\";\r\nimport { Header } from \"./components/Header\";\r\nimport { TodoInput } from \"./components/TodoInput\";\r\nimport { TodoList } from \"./components/TodoList\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <Header />\r\n      <TodoContextProvider>\r\n        <TodoInput />\r\n        <TodoList />\r\n      </TodoContextProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./config/firebaseConfig\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}